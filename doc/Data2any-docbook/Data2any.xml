<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY company "Acme Mc Carpenter, Inc">
<!ENTITY product "Data2any">
<!ENTITY % isoamsa SYSTEM "Entities/isoamsa.ent">
<!--
     File isoamsa.ent produced by the XSL script entities.xsl
     from input data in unicode.xml.

     Please report any errors to David Carlisle
     via the public W3C list www-math@w3.org.

     The numeric character values assigned to each entity
     (should) match the Unicode assignments in Unicode 4.0.

     Entity names in this file are derived from files carrying the
     following notice:

     (C) International Organization for Standardization 1986
     Permission to copy in any form is granted for use with
     conforming SGML systems and applications as defined in
     ISO 8879, provided this notice is included in all copies.

--><!-- 
     Version: $Id: isoamsa.ent,v 1.2 2003/12/08 15:14:43 davidc Exp $

       Public identifier: ISO 8879:1986//ENTITIES Added Math Symbols: Arrow Relations//EN//XML
       System identifier: http://www.w3.org/2003/entities/iso8879/isoamsa.ent

     The public identifier should always be used verbatim.
     The system identifier may be changed to suit local requirements.

     Typical invocation:

       <!ENTITY % isoamsa PUBLIC
         "ISO 8879:1986//ENTITIES Added Math Symbols: Arrow Relations//EN//XML"
         "http://www.w3.org/2003/entities/iso8879/isoamsa.ent"
       >
       %isoamsa;

--><!ENTITY cularr "&#x021B6;">
<!--ANTICLOCKWISE TOP SEMICIRCLE ARROW --><!ENTITY curarr "&#x021B7;">
<!--CLOCKWISE TOP SEMICIRCLE ARROW --><!ENTITY dArr "&#x021D3;">
<!--DOWNWARDS DOUBLE ARROW --><!ENTITY darr2 "&#x021CA;">
<!--DOWNWARDS PAIRED ARROWS --><!ENTITY dharl "&#x021C3;">
<!--DOWNWARDS HARPOON WITH BARB LEFTWARDS --><!ENTITY dharr "&#x021C2;">
<!--DOWNWARDS HARPOON WITH BARB RIGHTWARDS --><!ENTITY dlarr "&#x02199;">
<!--SOUTH WEST ARROW --><!ENTITY drarr "&#x02198;">
<!--SOUTH EAST ARROW --><!ENTITY hArr "&#x021D4;">
<!--LEFT RIGHT DOUBLE ARROW --><!ENTITY harr "&#x02194;">
<!--LEFT RIGHT ARROW --><!ENTITY harrw "&#x021AD;">
<!--LEFT RIGHT WAVE ARROW --><!ENTITY lAarr "&#x021DA;">
<!--LEFTWARDS TRIPLE ARROW --><!ENTITY Larr "&#x0219E;">
<!--LEFTWARDS TWO HEADED ARROW --><!ENTITY larr2 "&#x021C7;">
<!--LEFTWARDS PAIRED ARROWS --><!ENTITY larrhk "&#x021A9;">
<!--LEFTWARDS ARROW WITH HOOK --><!ENTITY larrlp "&#x021AB;">
<!--LEFTWARDS ARROW WITH LOOP --><!ENTITY larrtl "&#x021A2;">
<!--LEFTWARDS ARROW WITH TAIL --><!ENTITY lhard "&#x021BD;">
<!--LEFTWARDS HARPOON WITH BARB DOWNWARDS --><!ENTITY lharu "&#x021BC;">
<!--LEFTWARDS HARPOON WITH BARB UPWARDS --><!ENTITY lrarr2 "&#x021C6;">
<!--LEFTWARDS ARROW OVER RIGHTWARDS ARROW --><!ENTITY lrhar2 "&#x021CB;">
<!--LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON --><!ENTITY lsh "&#x021B0;">
<!--UPWARDS ARROW WITH TIP LEFTWARDS --><!ENTITY map "&#x021A6;">
<!--RIGHTWARDS ARROW FROM BAR --><!ENTITY mumap "&#x022B8;">
<!--MULTIMAP --><!ENTITY nearr "&#x02197;">
<!--NORTH EAST ARROW --><!ENTITY nhArr "&#x021CE;">
<!--LEFT RIGHT DOUBLE ARROW WITH STROKE --><!ENTITY nharr "&#x021AE;">
<!--LEFT RIGHT ARROW WITH STROKE --><!ENTITY nlArr "&#x021CD;">
<!--LEFTWARDS DOUBLE ARROW WITH STROKE --><!ENTITY nlarr "&#x0219A;">
<!--LEFTWARDS ARROW WITH STROKE --><!ENTITY nrArr "&#x021CF;">
<!--RIGHTWARDS DOUBLE ARROW WITH STROKE --><!ENTITY nrarr "&#x0219B;">
<!--RIGHTWARDS ARROW WITH STROKE --><!ENTITY nwarr "&#x02196;">
<!--NORTH WEST ARROW --><!ENTITY olarr "&#x021BA;">
<!--ANTICLOCKWISE OPEN CIRCLE ARROW --><!ENTITY orarr "&#x021BB;">
<!--CLOCKWISE OPEN CIRCLE ARROW --><!ENTITY rAarr "&#x021DB;">
<!--RIGHTWARDS TRIPLE ARROW --><!ENTITY Rarr "&#x021A0;">
<!--RIGHTWARDS TWO HEADED ARROW --><!ENTITY rarr2 "&#x021C9;">
<!--RIGHTWARDS PAIRED ARROWS --><!ENTITY rarrhk "&#x021AA;">
<!--RIGHTWARDS ARROW WITH HOOK --><!ENTITY rarrlp "&#x021AC;">
<!--RIGHTWARDS ARROW WITH LOOP --><!ENTITY rarrtl "&#x021A3;">
<!--RIGHTWARDS ARROW WITH TAIL --><!ENTITY rarrw "&#x0219D;">
<!--RIGHTWARDS WAVE ARROW --><!ENTITY rhard "&#x021C1;">
<!--RIGHTWARDS HARPOON WITH BARB DOWNWARDS --><!ENTITY rharu "&#x021C0;">
<!--RIGHTWARDS HARPOON WITH BARB UPWARDS --><!ENTITY rlarr2 "&#x021C4;">
<!--RIGHTWARDS ARROW OVER LEFTWARDS ARROW --><!ENTITY rlhar2 "&#x021CC;">
<!--RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON --><!ENTITY rsh "&#x021B1;">
<!--UPWARDS ARROW WITH TIP RIGHTWARDS --><!ENTITY uArr "&#x021D1;">
<!--UPWARDS DOUBLE ARROW --><!ENTITY uarr2 "&#x021C8;">
<!--UPWARDS PAIRED ARROWS --><!ENTITY uharl "&#x021BF;">
<!--UPWARDS HARPOON WITH BARB LEFTWARDS --><!ENTITY uharr "&#x021BE;">
<!--UPWARDS HARPOON WITH BARB RIGHTWARDS --><!ENTITY vArr "&#x021D5;">
<!--UP DOWN DOUBLE ARROW --><!ENTITY varr "&#x02195;">
<!--UP DOWN ARROW --><!ENTITY xhArr "&#x027FA;">
<!--LONG LEFT RIGHT DOUBLE ARROW --><!ENTITY xharr "&#x027F7;">
<!--LONG LEFT RIGHT ARROW --><!ENTITY xlArr "&#x027F8;">
<!--LONG LEFTWARDS DOUBLE ARROW --><!ENTITY xrArr "&#x027F9;">
<!--LONG RIGHTWARDS DOUBLE ARROW --><!ENTITY ouml "&#246;">
]>
<book xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xl="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
  <title>Using the Perl module Data2any</title>
  <info>
    <author>
      <personname>
        <firstname>Marcel</firstname>
        <surname>Timmerman</surname>
      </personname>
      <email>mt1957@gmail.com</email>
    </author>
    <address>
      <city>Haarlem</city>
      <country>Netherlands</country>
    </address>
    <copyright>
      <year>2013</year>
      <holder>Marcel Timmerman</holder>
    </copyright>
    <date>2014-04-22</date>
    <abstract>
      <para>&product; is capable of transforming an internally build data structure into xml after which it is possible to store it in a file or send it to any program for conversion or some other type of processor. 
</para>
      <para>Version of yaml2any when book is written: v0.0.5</para>
      <para>Version of Data2any when book is written: v0.1.1</para>
      <para>Generated on date 2014-04-22.</para>
    </abstract>
  </info>
  <dedication>
    <para>To my wife Juhi, who finds me too often behind the computer.
</para>
  </dedication>
  <preface>
    <title>Introduction</title>
    <para>Welcome to <emphasis>Data2any</emphasis>. Data2any is a Perl module to convert data structures into XML. This book will explain all intricasies of the data structure needed by the module and to explain how to write a plugin. Also, explanation of the data structure in Yaml format is given.
</para>
    <section>
      <title>Who this book is for</title>
      <para>There are plenty XML aware editors around with automatic coloring and autocompletion of words to name a few items such editors make use of. So why bother? Well, this book is for users who want to create XML without thinking about the syntax all the time. While this module will solve this for you, it is not a very easy task. The people who aren't strong in programming or programming Perl in particular. For them there is the program <filename>yaml2xml</filename> and they only need to study the information of the YAML data description language and the installed plugins.
</para>
      <para>Some more reasons to use the module and/or program are itemized below:
</para>
      <itemizedlist>
        <listitem>
          <para>When using YAML as input for the program <filename>yaml2xml</filename> a nice input format can give a better view of your text than in full xml code.
</para>
        </listitem>
        <listitem>
          <para>Use of shortcuts in the text such as b[real] will translate to &lt;b&gt;real&lt;/b&gt;. This is also an enhancement of visibility. This facility makes it easy to insert tags inlined into your text when the tag doesn't need any attributes.
</para>
        </listitem>
        <listitem>
          <para>Use of preset variables such as $time and $date are nice to make your document a bit more dynamic. The variables are set by the module for later use. It is possible to set new variables at the start of the document, in the text and in the plugins code. There are also special variables called counters.
</para>
        </listitem>
        <listitem>
          <para>Use of plugins can make tedious work simple. Take for example an imaginary plugin which can insert a set of elements to build a table row. Now, instead of writing a static piece of XML:
</para>
          <programlisting><![CDATA[<table>
   <tr>
      <td>table row 1 data col 1</td>
      <td>table row 1 data col 2</td>
   </tr>
   <tr>
      td>table row 2 data col 1</td>
      td>table row 2 data col 2</td>
   </tr>
</table>
]]></programlisting>
          <para>one could write the following:</para>
          <programlisting>- table:
   - !perl/Data2any::Html::TableRow
      - table row 1 data col 1
      - table row 1 data col 2
   - !perl/Data2any::Html::TableRow
      - table row 2 data col 1
      - table row 2 data col 2
</programlisting>
          <para>You can easily extend this idea to let this plugin gather information from other sources such as system log files, network servers, websites and databases and put that into a table. Very nice to make a report of some sort.
</para>
        </listitem>
        <listitem>
          <para>Plugins can also help to devide a big document into smaller pieces to make the whole more managable. The pieces can then be maintained by different authors. With some xml processors like <filename>xsltporoc</filename> it is possible to use xincludes which can do the same.
</para>
        </listitem>
        <listitem>
          <para>Once you've edited your text in the Yaml format you are not tied to that system. Just generate the XML and work from that moment with some editor. However, it will then not be possible (yet) to return back to the Yaml format and you loose the use of plugins and the other facilities.
</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Structure of the book</title>
      <para>This book will make its introduction by starting with an example of the Perl code needed to do a minimal conversion. Then makes a comparison with a similar datastructure defined in yaml and introduces the conversion program <filename>yaml2xml</filename>. Then a lot will be explained using Yaml before coming back to the Perl data structures. These will be shown side by side with the yaml code. Besides converting, the program is capable to send the results to other agents like xslt processors or just to file or the standard output.
</para>
      <itemizedlist>
        <listitem>
          <para>Chapter 1, Introducing Data2any</para>
          <para>This chapter introduces you to the module with a simple <phrase>"Hello   World"</phrase> example showing the data structure and its result. The same example will then also be compared with a representable piece of yaml code and the use of <filename>yaml2xml</filename>.
</para>
        </listitem>
        <listitem>
          <para>Chapter 2, How to use Yaml</para>
          <para>This chapter will show you how to write Yaml code which the program <filename>yaml2xml</filename> will convert to XML. A full description of all the possebilities are given here.
</para>
        </listitem>
        <listitem>
          <para>Chapter 3, Defining the data structure</para>
          <para>In this chapter we will return to the Perl code and describe the datastructure for conversions to XML.
</para>
        </listitem>
        <listitem>
          <para>Chapter 4, Error messages</para>
          <para>This program makes use of several other modules which have all their own way of saying that there is something wrong. In this chapter I will explain the messages and what they all mean.
</para>
        </listitem>
        <listitem>
          <para>Chapter A, Availability</para>
          <para>
</para>
        </listitem>
      </itemizedlist>
    </section>
  </preface>
  <chapter>
    <info>
      <title>Introducing Data2any</title>
    </info>
    <section>
      <info>
        <title>lorem</title>
      </info>
      <para>
</para>
    </section>
    <section>
      <title>Simple example</title>
      <para>Lorem ipsum</para>
      <programlisting xml:id="ex.simpleprog.1"><![CDATA[
use Modern::Perl;
require Data2any; ]]><co xml:id="co.import.module"/><![CDATA[

my $data = ]]><co xml:id="co.data.contruction"/><![CDATA[
[[{ DOCTYPE => { root => 'html'}}
 ,{ html =>
    [{ body => 
       [{ 'h1 id=hw class=helloWorld' => 'Hello World Example'}
       ,{ p => 'Hello World, this is <b>real</b> easy! Wrote this'
             . ' on $date at $time!'
        }
       ]
     }
    ]
  }
 ]
];

my $d2xml = Data2any->new ]]><co xml:id="co.module.init"/><![CDATA[
   ( inputData => $data
   , dataLabel => 'internal'
   , logging => 1
   , requestDocument => 0
   ); 

$d2xml->nodetreeFromData; ]]><co xml:id="co.translate.1"/><![CDATA[
$d2xml->xmlFromNodetree; ]]><co xml:id="co.translate.2"/><![CDATA[
$d2xml->postprocess; ]]><co xml:id="co.translate.3"/></programlisting>
      <calloutlist>
        <callout arearefs="co.import.module">
          <para>An important ingredient, import the module Data2any. In Perl this is nessesary to get the module code known to the program.
</para>
        </callout>
        <callout arearefs="co.data.contruction">
          <para>$data is the variable we use here to build our structure. It looks already complex while the output is quite simple.
</para>
        </callout>
        <callout arearefs="co.module.init">
          <para>The next step is to call the constructor of the module and set a few attributes to work with.
</para>
        </callout>
        <callout arearefs="co.translate.1">
          <para>First step in translation is to convert the data into a tree of nodes. These are AppState::NodeTree::Node objects belonging to another module. For simple translations it isn't nessesary to know the how they are build. The node tree can be retrieved from the $d2xml object if needed.
</para>
        </callout>
        <callout arearefs="co.translate.2">
          <para>Second step is to generate the xml in text format. The text can be retrieved from the $d2xml object.
</para>
        </callout>
        <callout arearefs="co.translate.3">
          <para>The last step is to add some extra's like a httpheader, or to send the xml to other processors for translation or storage.
</para>
        </callout>
      </calloutlist>
      <para>Which will produce the following<screen><![CDATA[<!DOCTYPE html>
<html>
  <body>
<h1 class="helloWorld" id="hw">Hello World Example</h1>
<p>Hello World, this is <b>real</b> easy! Wrote this on
2013-11-09 at 17:18:15!</p>
  </body>
</html>
]]></screen></para>
    </section>
  </chapter>
  <chapter>
    <info>
      <title>How to use YAML</title>
    </info>
    <section>
      <info>
        <title>Short introduction to YAML</title>
      </info>
      <para>YAML or <quote>YAML   Ain't   Markup   Language</quote> (<trademark>YAML</trademark>)<footnote><para>Manual can be found <link xl:href="http://www.yaml.org/spec/1.2/spec.html">here</link></para></footnote>is a data description language designed by Oren Ben-Kiki, Clark Evens  and Ingy d&ouml;t Net. The purpose of this language is to describe your data after which a program loads it using a Perl  module. Other languages like Ruby and Python also have modules to read YAML. Data2any uses YAML and translates it to xml. Because of this the program will use only a subset of YAML and the definitions must be given in a specific way and order.
</para>
      <para/>
      <para><figure floatstyle="left" pgwide="0"><mediaobject><imageobject><imagedata format="SVG" width="75" align="right"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseprofile="full" width="300" height="200"><rect width="300" height="200" fill="red"/><circle cx="150" cy="100" r="80" fill="green"/><text x="150" y="125" font-size="60" text-anchor="middle" fill="white">SVG</text></svg></imagedata></imageobject></mediaobject></figure>I love cheese, especially airedale queso. Cheese and biscuits halloumi
cauliflower cheese cottage cheese swiss boursin fondue caerphilly. Cow
port-salut camembert de normandie macaroni cheese feta who moved my cheese
babybel boursin. Red leicester roquefort boursin squirty cheese jarlsberg blue
castello caerphilly chalk and cheese. Lancashire.
<sidebar><?dbfo float-type='right' sidebar-width='160px' ?><mediaobject><imageobject><imagedata format="SVG" width="75"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseprofile="full" width="300" height="200"><rect width="300" height="200" fill="red"/><circle cx="150" cy="100" r="80" fill="green"/><text x="150" y="125" font-size="60" text-anchor="middle" fill="white">SVG</text></svg></imagedata></imageobject></mediaobject></sidebar><sidebar><?dbfo float-type='right' sidebar-width='160px' ?>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
</sidebar><note><title>Note section</title><para>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium
doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore
veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia
consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque
porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci
velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore
magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum
exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi
consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit
esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo
voluptas nulla pariatur?
</para></note><caution><title>Caution section</title><para>Now that there is the Tec-9, a crappy spray gun from South Miami. This gun is
advertised as the most popular gun in American crime. Do you believe that shit?
It actually says that in the little book that comes with it: the most popular
gun in American crime. Like they're actually proud of that shit.
</para></caution><tip><title>Tip section</title><para>Tenetur beatae non eius facere reprehenderit dolorum omnis unde. Dicta tempora unde enim et corporis ratione eos unde. Minima voluptatem sapiente totam culpa eligendi officia natus repellendus. Autem nesciunt consectetur in a non nisi molestiae. Non deserunt quia architecto nobis accusamus quibusdam veniam optio. Dolorem nam mollitia totam consectetur tempore.

Id aut tempora eum rerum alias. Et consectetur adipisci molestiae placeat. Sed impedit totam dolorem rerum non quia tempora ut. Voluptatibus rerum et rerum molestiae dolorum. Qui recusandae voluptates quasi omnis doloribus qui. Doloremque voluptatum quidem sint totam debitis et quibusdam.

Suscipit veniam itaque consequatur maxime enim suscipit facilis aut. Vitae quis ut sequi. Officiis et repellendus dolores.

Temporibus et ipsa rerum debitis impedit doloremque. Dolore quia eos aliquid distinctio voluptas ut. Dolorem eos voluptas minima et nulla quibusdam. Aut asperiores hic aut sit. Qui et deleniti quis ipsum ea quam aperiam praesentium.</para></tip><important><title>Important section</title><para>Veggies sunt bona vobis, proinde vos postulo esse magis grape pea sprouts
horseradish courgette maize spinach prairie turnip jicama coriander quandong
gourd broccoli seakale gumbo. Parsley corn lentil zucchini radicchio maize
horseradish courgette maize spinach prairie turnip jícama coriander quandong
burdock avocado sea lettuce. Garbanzo tigernut earthnut pea fennel.
</para></important><warning><title>Warning section</title><para>officiis pariatur quos sed rem</para></warning></para>
    </section>
  </chapter>
  <chapter audience="programmers">
    <info>
      <title>Defining the data structure</title>
    </info>
    <section>
      <info>
        <title>The program layout</title>
      </info>
      <para>Before going into details I will show you again the global layout of the program.
The program must be prepared before using any of the modules functions. This can be accompleshed by importing the module. Then the data must be prepared after which the initialization, the conversion and generation of XML will take place. 
</para>
      <programlisting># Importing modules
use Modern::Perl;
require Data2any;

# Creating the data structure
my $data = [[...][...]];

# Initialize module with the data
my $d2xml = Data2any-&gt;new( inputData =&gt; $data
                         , dataLabel =&gt; 'internal'
                         , logging =&gt; 1
                         , requestDocument =&gt; 0
                         );

# Convert to XML
$d2xml-&gt;nodetreeFromData;
$d2xml-&gt;xmlFromNodetree;        
$d2xml-&gt;postprocess;
</programlisting>
      <para>We will first explain the data structure now before we go into the details of the used functions.
</para>
    </section>
    <section>
      <info>
        <title>The data</title>
      </info>
      <para>The data specification describes a set of documents as a set of array references in an array reference like the following example is a declaration of a set of two douments.
   
</para>
      <programlisting>my $document1 = [];
my $document2 = [];
my $data = [ $document1, $document2];
</programlisting>
    </section>
    <section>
      <info>
        <title>Use of arrays</title>
      </info>
      <para>This chapter describes the data structure which is needed for the Data2any module. The data structure needed for the program is designed in such a way that many situations can be described.
</para>
    </section>
  </chapter>
  <appendix>
    <info>
      <title>Availability</title>
      <abstract>
        <para>lorem
</para>
      </abstract>
    </info>
    <section>
      <title>Availability</title>
      <para>The program is developed on a Linux platform. I suppose it will be able to work on any Unix platform with a reasonable recent Perl version and CPAN modules. Other operating systems still need to be investigated.
</para>
      <section>
        <title>Installation of the module and program</title>
        <para>Installation steps are simple for Linux systems. For this and other systems the following instructions can be followed:
</para>
        <itemizedlist>
          <listitem>
            <para>Linux</para>
            <literallayout>&gt; su
... password ...
# yum 
# cpan Data2any
...
</literallayout>
            <para>Windows XP</para>
            <para>Windows 8</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </appendix>
  <index/>
</book>
